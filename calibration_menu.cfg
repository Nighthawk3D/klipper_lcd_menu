### menu calibration ###
[menu __main __calib]
type: list
enable: {(not printer.idle_timeout.state == "Printing")}
name: Calibration

[menu __main __calib __probe]
type: list
enable: {(not printer.idle_timeout.state == "Printing") and ('probe' in printer)}
name: Probe Calibration

[menu __main __calib __probe __bedprobe]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('probe' in printer)}
name: Bed probe
gcode: PROBE

[menu __main __control __calib __probe __probeaccuracy]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('probe' in printer)}
name: Probe Accuracy
gcode:
  PROBE_ACCURACY

[menu __main __control __calib __probe __probecalibrate]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('probe' in printer)}
name: Probe Calibrate
gcode:
  PROBE_CALIBRATE

[menu __main __calib __probe __move_z]
type: input
name: Move Z: {'%03.2f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_step: 1
realtime: True
gcode:
    {%- if menu.event == 'change' -%}
        G1 Z{'%.2f' % menu.input}
    {%- elif menu.event == 'long_click' -%}
        G1 Z{'%.2f' % menu.input}
        SAVE_GCODE_STATE NAME=__move__axis
        G91
        G1 Z2
        G1 Z-2
        RESTORE_GCODE_STATE NAME=__move__axis
    {%- endif -%}

[menu __main __calib __probe __test_z]
type: input
name: Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input: 6
input_min: 0
input_max: 11
input_step: 1
gcode:
    {%- if menu.event == 'long_click' -%}
        TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
    {%- endif -%}

[menu __main __calib __probe __accept]
type: command
name: Accept
gcode: ACCEPT

[menu __main __calib __probe __abort]
type: command
name: Abort
gcode: ABORT

[menu __main __calib __delta]
type: list
enable: {(not printer.idle_timeout.state == "Printing") and ('delta_calibrate' in printer)}
name: Delta Calibration

[menu __main __calib __delta __delta_calib_auto]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('delta_calibrate' in printer)}
name: Delta cal. auto
gcode:
    G28
    DELTA_CALIBRATE

[menu __main __calib __delta __delta_calib_man]
type: list
enable: {(not printer.idle_timeout.state == "Printing") and ('delta_calibrate' in printer)}
name: Delta cal. man

[menu __main __calib __delta __delta_calib_man __start]
type: command
name: Start probing
gcode:
    G28
    DELTA_CALIBRATE METHOD=manual

[menu __main __calib __delta __delta_calib_man __move_z]
type: input
name: Move Z: {'%03.2f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_step: 1
realtime: True
gcode:
    {%- if menu.event == 'change' -%}
        G1 Z{'%.2f' % menu.input}
    {%- elif menu.event == 'long_click' -%}
        G1 Z{'%.2f' % menu.input}
        SAVE_GCODE_STATE NAME=__move__axis
        G91
        G1 Z2
        G1 Z-2
        RESTORE_GCODE_STATE NAME=__move__axis
    {%- endif -%}

[menu __main __calib __delta __delta_calib_man __test_z]
type: input
name: Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input: 6
input_min: 0
input_max: 11
input_step: 1
gcode:
    {%- if menu.event == 'long_click' -%}
        TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
    {%- endif -%}

[menu __main __calib __delta __delta_calib_man __accept]
type: command
name: Accept
gcode: ACCEPT

[menu __main __calib __delta __delta_calib_man __abort]
type: command
name: Abort
gcode: ABORT

[menu __main __calib __pidtuning]
type: list
enable: {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name: PID tuning

[menu __main __calib __pidtuning __pid_abs]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer) and ('extruder' in printer)}
name: PID Tune ABS
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARK
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z50 F8000
    RESTORE_GCODE_STATE NAME=PARK
    M117 PID Tuning - ABS
    PID_CALIBRATE HEATER=heater_bed TARGET=110 WRITE_FILE=1
    M106 S128                         ;turn on part cooling fans for accuracy
    PID_CALIBRATE HEATER=extruder TARGET=240 WRITE_FILE=1
    SAVE_CONFIG

[menu __main __calib __pidtuning __pid_pla]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer) and ('extruder' in printer)}
name: PID Tune PLA
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARK
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z50 F8000
    RESTORE_GCODE_STATE NAME=PARK
    M117 PID Tuning - ABS
    PID_CALIBRATE HEATER=heater_bed TARGET=65 WRITE_FILE=1
    M106 S255                         ;turn on part cooling fans for accuracy
    PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1
    SAVE_CONFIG

[menu __main __calib __pidtuning __hotend_pid_tuning]
type: input
enable: {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name: {"Ex0 PID:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode:
    PID_CALIBRATE HEATER=extruder TARGET={'%.0f' % menu.input} WRITE_FILE=1

[menu __main __calib __pidtuning __hotbed_pid_tuning]
type: input
enable: {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name: {"Bed PID:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input: {printer.heater_bed.target}
input_min: 0
input_max: {printer.configfile.config.heater_bed.max_temp}
input_step: 1
gcode:
    PID_CALIBRATE HEATER=heater_bed TARGET={'%.0f' % menu.input} WRITE_FILE=1

[menu __main __calib __pidtuning __save_config]
type: command
name: Save config
gcode: SAVE_CONFIG

[menu __main __calib __inputshaper]
type: list
enable: {(not printer.idle_timeout.state == "Printing")}
name: Input Shaper

[menu __main __calib __inputshaper __shapercalibrate]
type: command
enable: {(not printer.idle_timeout.state == "Printing")}
name: Shaper Calibrate XY
gcode: SHAPER_CALIBRATE

[menu __main __calib __inputshaper __shapercalibratex]
type: command
enable: {(not printer.idle_timeout.state == "Printing")}
name: Shaper Calibrate X
gcode: SHAPER_CALIBRATE AXIS=X

[menu __main __calib __inputshaper __shapercalibratey]
type: command
enable: {(not printer.idle_timeout.state == "Printing")}
name: Shaper Calibrate Y
gcode: SHAPER_CALIBRATE AXIS=Y

[menu __main __calib __inputshaper __save_config]
type: command
name: Save config
gcode: SAVE_CONFIG